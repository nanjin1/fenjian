<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [motor\motor.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image motor\motor.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Tue May 21 23:28:06 2024
<BR><P>
<H3>Maximum Stack Usage =        364 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
usmart_cmd_rec &rArr; usmart_get_fparam &rArr; usmart_str2num
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[e5]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[52]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[52]">ADC_IRQHandler</a><BR>
 <LI><a href="#[3a]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3a]">BusFault_Handler</a><BR>
 <LI><a href="#[38]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[38]">HardFault_Handler</a><BR>
 <LI><a href="#[39]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[39]">MemManage_Handler</a><BR>
 <LI><a href="#[37]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[37]">NMI_Handler</a><BR>
 <LI><a href="#[ab]">StartDefaultTask</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[ab]">StartDefaultTask</a><BR>
 <LI><a href="#[ac]">Startdebug</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[ac]">Startdebug</a><BR>
 <LI><a href="#[3b]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3b]">UsageFault_Handler</a><BR>
 <LI><a href="#[ad]">chassis_task</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[ad]">chassis_task</a><BR>
 <LI><a href="#[1eb]">usmart_strcmp</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1eb]">usmart_strcmp</a><BR>
 <LI><a href="#[1f2]">usmart_strcopy</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f2]">usmart_strcopy</a><BR>
 <LI><a href="#[1ee]">usmart_search_nextc</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1ee]">usmart_search_nextc</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[52]">ADC_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[1a]">ActionGroup</a> from servo.o(i.ActionGroup) referenced 2 times from usmart_config.o(.data)
 <LI><a href="#[b0]">BarTextTask</a> from track_bar_receive.o(i.BarTextTask) referenced from freertos.o(.constdata)
 <LI><a href="#[b4]">BooTask</a> from chassis_control.o(i.BooTask) referenced from chassis_control.o(.constdata)
 <LI><a href="#[3a]">BusFault_Handler</a> from stm32f7xx_it.o(i.BusFault_Handler) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[54]">CAN1_RX0_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[55]">CAN1_RX1_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[56]">CAN1_SCE_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[53]">CAN1_TX_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[80]">CAN2_RX0_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[81]">CAN2_RX1_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[82]">CAN2_SCE_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[7f]">CAN2_TX_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[9e]">CEC_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[8f]">CRYP_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[f]">Circle_around</a> from chassis_control.o(i.Circle_around) referenced 4 times from usmart_config.o(.data)
 <LI><a href="#[8e]">DCMI_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[4b]">DMA1_Stream0_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[4c]">DMA1_Stream1_IRQHandler</a> from stm32f7xx_it.o(i.DMA1_Stream1_IRQHandler) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[4d]">DMA1_Stream2_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[4e]">DMA1_Stream3_IRQHandler</a> from stm32f7xx_it.o(i.DMA1_Stream3_IRQHandler) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[4f]">DMA1_Stream4_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[50]">DMA1_Stream5_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[51]">DMA1_Stream6_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[6f]">DMA1_Stream7_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[9a]">DMA2D_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[78]">DMA2_Stream0_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[79]">DMA2_Stream1_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[7a]">DMA2_Stream2_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[7b]">DMA2_Stream3_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[7c]">DMA2_Stream4_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[84]">DMA2_Stream5_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[85]">DMA2_Stream6_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[86]">DMA2_Stream7_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[3d]">DebugMon_Handler</a> from stm32f7xx_it.o(i.DebugMon_Handler) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[2b]">Dump_RoundRing</a> from general_interface.o(i.Dump_RoundRing) referenced 2 times from usmart_config.o(.data)
 <LI><a href="#[28]">Dump_ball</a> from general_interface.o(i.Dump_ball) referenced 2 times from usmart_config.o(.data)
 <LI><a href="#[2a]">Dump_block</a> from general_interface.o(i.Dump_block) referenced 2 times from usmart_config.o(.data)
 <LI><a href="#[7d]">ETH_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[7e]">ETH_WKUP_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[46]">EXTI0_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[68]">EXTI15_10_IRQHandler</a> from stm32f7xx_it.o(i.EXTI15_10_IRQHandler) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[47]">EXTI1_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[48]">EXTI2_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[49]">EXTI3_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[4a]">EXTI4_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[57]">EXTI9_5_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[b3]">EncoderTask</a> from chassis_control.o(i.EncoderTask) referenced from chassis_control.o(.constdata)
 <LI><a href="#[44]">FLASH_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[70]">FMC_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[91]">FPU_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[22]">Get_HW1</a> from track_bar_receive.o(i.Get_HW1) referenced 2 times from usmart_config.o(.data)
 <LI><a href="#[4]">Get_Yaw</a> from hwt101_imu.o(i.Get_Yaw) referenced 2 times from hwt101_imu.o(.data)
 <LI><a href="#[90]">HASH_RNG_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[23]">HWSwitch_Move</a> from read_status_task.o(i.HWSwitch_Move) referenced 2 times from usmart_config.o(.data)
 <LI><a href="#[38]">HardFault_Handler</a> from stm32f7xx_it.o(i.HardFault_Handler) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[b5]">HeightUpdate_Task</a> from read_status_task.o(i.HeightUpdate_Task) referenced from read_status_task.o(.constdata)
 <LI><a href="#[60]">I2C1_ER_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[5f]">I2C1_EV_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[62]">I2C2_ER_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[61]">I2C2_EV_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[89]">I2C3_ER_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[88]">I2C3_EV_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[a0]">I2C4_ER_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[9f]">I2C4_EV_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[1d]">Judge_Side</a> from read_status_task.o(i.Judge_Side) referenced 2 times from usmart_config.o(.data)
 <LI><a href="#[9d]">LPTIM1_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[99]">LTDC_ER_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[98]">LTDC_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[2f]">Ladder_process</a> from read_status_task.o(i.Ladder_process) referenced 2 times from usmart_config.o(.data)
 <LI><a href="#[b2]">LineTask</a> from chassis_control.o(i.LineTask) referenced from chassis_control.o(.constdata)
 <LI><a href="#[b1]">MV_QueryTaskFunc</a> from openmv.o(i.MV_QueryTaskFunc) referenced from openmv.o(.constdata)
 <LI><a href="#[15]">MV_SendCmd</a> from openmv.o(i.MV_SendCmd) referenced 2 times from usmart_config.o(.data)
 <LI><a href="#[13]">MV_Start</a> from openmv.o(i.MV_Start) referenced 2 times from usmart_config.o(.data)
 <LI><a href="#[14]">MV_Stop</a> from openmv.o(i.MV_Stop) referenced 2 times from usmart_config.o(.data)
 <LI><a href="#[39]">MemManage_Handler</a> from stm32f7xx_it.o(i.MemManage_Handler) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[1b]">Move_CountBar</a> from general_interface.o(i.Move_CountBar) referenced 2 times from usmart_config.o(.data)
 <LI><a href="#[31]">Move_inch</a> from general_interface.o(i.Move_inch) referenced 2 times from usmart_config.o(.data)
 <LI><a href="#[37]">NMI_Handler</a> from stm32f7xx_it.o(i.NMI_Handler) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[83]">OTG_FS_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[6a]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[8b]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[8a]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[8d]">OTG_HS_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[8c]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[41]">PVD_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[3e]">PendSV_Handler</a> from port.o(.emb_text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[9c]">QUADSPI_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[45]">RCC_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[69]">RTC_Alarm_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[43]">RTC_WKUP_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[b6]">Read_Swicth</a> from read_status_task.o(i.Read_Swicth) referenced from read_status_task.o(.constdata)
 <LI><a href="#[36]">Reset_Handler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[2c]">Restart_Ladder</a> from general_interface.o(i.Restart_Ladder) referenced 2 times from usmart_config.o(.data)
 <LI><a href="#[97]">SAI1_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[9b]">SAI2_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[71]">SDMMC1_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[a1]">SPDIF_RX_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[63]">SPI1_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[64]">SPI2_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[73]">SPI3_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[94]">SPI4_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[95]">SPI5_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[96]">SPI6_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[3c]">SVC_Handler</a> from port.o(.emb_text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[24]">Set_IMUStatus</a> from hwt101_imu.o(i.Set_IMUStatus) referenced 2 times from usmart_config.o(.data)
 <LI><a href="#[18]">Set_InitYaw</a> from hwt101_imu.o(i.Set_InitYaw) referenced 4 times from usmart_config.o(.data)
 <LI><a href="#[10]">Set_QueryState</a> from openmv.o(i.Set_QueryState) referenced 2 times from usmart_config.o(.data)
 <LI><a href="#[ab]">StartDefaultTask</a> from freertos.o(i.StartDefaultTask) referenced from freertos.o(.constdata)
 <LI><a href="#[1c]">Start_HeightUpdate</a> from read_status_task.o(i.Start_HeightUpdate) referenced 2 times from usmart_config.o(.data)
 <LI><a href="#[1e]">Start_Read_Switch</a> from read_status_task.o(i.Start_Read_Switch) referenced 2 times from usmart_config.o(.data)
 <LI><a href="#[ac]">Startdebug</a> from debug_task.o(i.Startdebug) referenced from freertos.o(.constdata)
 <LI><a href="#[3f]">SysTick_Handler</a> from port.o(i.SysTick_Handler) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[a2]">SystemInit</a> from system_stm32f7xx.o(i.SystemInit) referenced from startup_stm32f750xx.o(.text)
 <LI><a href="#[42]">TAMP_STAMP_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[58]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[5b]">TIM1_CC_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[5a]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[59]">TIM1_UP_TIM10_IRQHandler</a> from stm32f7xx_it.o(i.TIM1_UP_TIM10_IRQHandler) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[5c]">TIM2_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[5d]">TIM3_IRQHandler</a> from stm32f7xx_it.o(i.TIM3_IRQHandler) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[5e]">TIM4_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[72]">TIM5_IRQHandler</a> from stm32f7xx_it.o(i.TIM5_IRQHandler) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[76]">TIM6_DAC_IRQHandler</a> from stm32f7xx_it.o(i.TIM6_DAC_IRQHandler) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[77]">TIM7_IRQHandler</a> from stm32f7xx_it.o(i.TIM7_IRQHandler) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[6b]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[6e]">TIM8_CC_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[6d]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[6c]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[19]">Turn_angle</a> from imu_pid.o(i.Turn_angle) referenced 2 times from usmart_config.o(.data)
 <LI><a href="#[74]">UART4_IRQHandler</a> from stm32f7xx_it.o(i.UART4_IRQHandler) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[75]">UART5_IRQHandler</a> from stm32f7xx_it.o(i.UART5_IRQHandler) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[92]">UART7_IRQHandler</a> from stm32f7xx_it.o(i.UART7_IRQHandler) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[93]">UART8_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[a6]">UART_DMAAbortOnError</a> from stm32f7xx_hal_uart.o(i.UART_DMAAbortOnError) referenced from stm32f7xx_hal_uart.o(i.HAL_UART_IRQHandler)
 <LI><a href="#[a8]">UART_RxISR_16BIT</a> from stm32f7xx_hal_uart.o(i.UART_RxISR_16BIT) referenced from stm32f7xx_hal_uart.o(i.UART_Start_Receive_IT)
 <LI><a href="#[a7]">UART_RxISR_8BIT</a> from stm32f7xx_hal_uart.o(i.UART_RxISR_8BIT) referenced from stm32f7xx_hal_uart.o(i.UART_Start_Receive_IT)
 <LI><a href="#[65]">USART1_IRQHandler</a> from stm32f7xx_it.o(i.USART1_IRQHandler) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[66]">USART2_IRQHandler</a> from stm32f7xx_it.o(i.USART2_IRQHandler) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[67]">USART3_IRQHandler</a> from stm32f7xx_it.o(i.USART3_IRQHandler) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[87]">USART6_IRQHandler</a> from stm32f7xx_it.o(i.USART6_IRQHandler) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[3b]">UsageFault_Handler</a> from stm32f7xx_it.o(i.UsageFault_Handler) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[40]">WWDG_IRQHandler</a> from startup_stm32f750xx.o(.text) referenced from startup_stm32f750xx.o(RESET)
 <LI><a href="#[16]">Wait_Switches</a> from read_status_task.o(i.Wait_Switches) referenced 2 times from usmart_config.o(.data)
 <LI><a href="#[20]">Wait_Switches_Time</a> from read_status_task.o(i.Wait_Switches_Time) referenced 2 times from usmart_config.o(.data)
 <LI><a href="#[b7]">__main</a> from __main.o(!!!main) referenced from startup_stm32f750xx.o(.text)
 <LI><a href="#[a5]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[1f]">blue_all</a> from general_interface.o(i.blue_all) referenced 2 times from usmart_config.o(.data)
 <LI><a href="#[21]">change_w_error</a> from chassis.o(i.change_w_error) referenced 2 times from usmart_config.o(.data)
 <LI><a href="#[ad]">chassis_task</a> from chassis_task.o(i.chassis_task) referenced from freertos.o(.constdata)
 <LI><a href="#[29]">control_ball</a> from general_interface.o(i.control_ball) referenced 4 times from usmart_config.o(.data)
 <LI><a href="#[a4]">fputc</a> from uart_handle.o(i.fputc) referenced from _printf_char_file.o(.text)
 <LI><a href="#[25]">go_yuan</a> from chassis.o(i.go_yuan) referenced 2 times from usmart_config.o(.data)
 <LI><a href="#[12]">move_by_encoder</a> from chassis_control.o(i.move_by_encoder) referenced 2 times from usmart_config.o(.data)
 <LI><a href="#[aa]">prvIdleTask</a> from tasks.o(i.prvIdleTask) referenced from tasks.o(i.vTaskStartScheduler)
 <LI><a href="#[a9]">prvTaskExitError</a> from port.o(i.prvTaskExitError) referenced from port.o(i.pxPortInitialiseStack)
 <LI><a href="#[26]">run_blue</a> from general_interface.o(i.run_blue) referenced 2 times from usmart_config.o(.data)
 <LI><a href="#[2e]">run_home</a> from general_interface.o(i.run_home) referenced 2 times from usmart_config.o(.data)
 <LI><a href="#[2d]">run_ladder</a> from general_interface.o(i.run_ladder) referenced 2 times from usmart_config.o(.data)
 <LI><a href="#[27]">run_red</a> from general_interface.o(i.run_red) referenced 2 times from usmart_config.o(.data)
 <LI><a href="#[30]">run_round</a> from general_interface.o(i.run_round) referenced 2 times from usmart_config.o(.data)
 <LI><a href="#[5]">set_debug_motor</a> from motor.o(i.set_debug_motor) referenced 2 times from usmart_config.o(.data)
 <LI><a href="#[6]">set_debug_speed</a> from motor.o(i.set_debug_speed) referenced 2 times from usmart_config.o(.data)
 <LI><a href="#[e]">set_imu_param</a> from imu_pid.o(i.set_imu_param) referenced 2 times from usmart_config.o(.data)
 <LI><a href="#[17]">set_imu_status</a> from imu_pid.o(i.set_imu_status) referenced 2 times from usmart_config.o(.data)
 <LI><a href="#[a]">set_motor</a> from motor.o(i.set_motor) referenced 2 times from usmart_config.o(.data)
 <LI><a href="#[b]">set_motor_debug</a> from motor.o(i.set_motor_debug) referenced 2 times from usmart_config.o(.data)
 <LI><a href="#[8]">set_motor_maxparam</a> from motor.o(i.set_motor_maxparam) referenced 2 times from usmart_config.o(.data)
 <LI><a href="#[7]">set_motor_pid</a> from motor.o(i.set_motor_pid) referenced 2 times from usmart_config.o(.data)
 <LI><a href="#[9]">set_motor_pid1</a> from motor.o(i.set_motor_pid1) referenced 2 times from usmart_config.o(.data)
 <LI><a href="#[11]">set_speed</a> from chassis.o(i.set_speed) referenced 2 times from usmart_config.o(.data)
 <LI><a href="#[c]">set_track_pid</a> from track_bar_receive.o(i.set_track_pid) referenced 2 times from usmart_config.o(.data)
 <LI><a href="#[ae]">track_scan</a> from track_task.o(i.track_scan) referenced from freertos.o(.constdata)
 <LI><a href="#[d]">track_status</a> from track_bar_receive.o(i.track_status) referenced 2 times from usmart_config.o(.data)
 <LI><a href="#[33]">usmart_cmd_rec</a> from usmart.o(i.usmart_cmd_rec) referenced 2 times from usmart_config.o(.data)
 <LI><a href="#[34]">usmart_exe</a> from usmart.o(i.usmart_exe) referenced 2 times from usmart_config.o(.data)
 <LI><a href="#[32]">usmart_init</a> from usmart.o(i.usmart_init) referenced 2 times from usmart_config.o(.data)
 <LI><a href="#[35]">usmart_scan</a> from usmart.o(i.usmart_scan) referenced 2 times from usmart_config.o(.data)
 <LI><a href="#[af]">usmartscan</a> from usmart_task.o(i.usmartscan) referenced from freertos.o(.constdata)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[b7]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[b8]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[ba]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[215]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[216]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[217]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[218]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[219]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[bb]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[da]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[bd]"></a>_printf_u</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[be]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[c0]"></a>_printf_c</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_c.o(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[c2]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[21a]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[c9]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[c4]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[21b]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[21c]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[21d]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[21e]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[21f]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[220]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[221]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[222]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[223]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[224]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[225]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[226]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[227]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[228]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[229]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[22a]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[22b]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[22c]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[22d]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[22e]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[ce]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[22f]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[230]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[231]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[232]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[233]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[234]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[235]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[b9]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[236]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[c6]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[c8]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[237]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[ca]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; MX_FREERTOS_Init &rArr; osThreadCreate &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[238]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[e6]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[cd]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[239]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[cf]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[3c]"></a>SVC_Handler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[1fd]"></a>__asm___6_port_c_39a90d8d__prvStartFirstTask</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[1fc]"></a>__asm___6_port_c_39a90d8d__prvEnableVFP</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[3e]"></a>PendSV_Handler</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[1c1]"></a>vPortGetIPSR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
</UL>

<P><STRONG><a name="[36]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[80]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[81]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[9e]"></a>CEC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[8f]"></a>CRYP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[8e]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[9a]"></a>DMA2D_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[84]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[85]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[86]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[91]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[90]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[89]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[88]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[a0]"></a>I2C4_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[9f]"></a>I2C4_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[9d]"></a>LPTIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[99]"></a>LTDC_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[98]"></a>LTDC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[83]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[8b]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[8a]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[8d]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[8c]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[9c]"></a>QUADSPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[97]"></a>SAI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[9b]"></a>SAI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>SDMMC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[a1]"></a>SPDIF_RX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[94]"></a>SPI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[95]"></a>SPI5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[96]"></a>SPI6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[93]"></a>UART8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f750xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[e5]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f750xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[23a]"></a>__use_no_semihosting</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi_2.o(.text), UNUSED)

<P><STRONG><a name="[12b]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>

<P><STRONG><a name="[23b]"></a>_ll_udiv</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[d2]"></a>__2printf</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, noretval__2printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_speed
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LineTask
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BooTask
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_QR_Target
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait_Switches
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Turn_angle
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Report
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MV_SendCmd
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MV_Decode
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_sys_cmd_exe
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_scan
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_exe
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_ball
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;begin_servo_status
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ladder_process
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HeightUpdate_Task
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Change_Hight
</UL>

<P><STRONG><a name="[d5]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[d6]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[d4]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[bc]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[bf]"></a>_printf_int_hex</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, _printf_hex_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_int_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[23c]"></a>_printf_longlong_hex</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, _printf_hex_int.o(.text), UNUSED)

<P><STRONG><a name="[d8]"></a>__printf</STRONG> (Thumb, 388 bytes, Stack size 40 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[1d5]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
</UL>

<P><STRONG><a name="[db]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[23d]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[dc]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FREERTOS_Init
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_by_encoder
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MV_QueryTask_Start
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Read_Switch
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_HeightUpdate
</UL>

<P><STRONG><a name="[23e]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[23f]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[240]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[dd]"></a>__aeabi_memset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aeabi_memset.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Swicth
</UL>

<P><STRONG><a name="[e9]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis_decode
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QR_decode
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActionGroup
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Track_RX_IRQ
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Read_Switch
</UL>

<P><STRONG><a name="[df]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[de]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[13c]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;all_data_clear
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_MspInit
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[241]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[242]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[e0]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[243]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[244]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[245]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[246]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[247]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[d7]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[e1]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[c1]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[c3]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[d3]"></a>_printf_char_file</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, _printf_char_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[e2]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[e3]"></a>ferror</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ferror.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[248]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[e4]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[249]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[c7]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[cc]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[1a]"></a>ActionGroup</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, servo.o(i.ActionGroup))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = ActionGroup &rArr; Error_Report &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Uint16_Transform
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Report
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QR_decode
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MV_Decode
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;centren_control
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_round
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_ladder
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_home
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_ball
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blue_all
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Restart_Ladder
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dump_block
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dump_ball
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dump_RoundRing
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;begin_servo_status
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ladder_process
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Change_Hight
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[b0]"></a>BarTextTask</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, track_bar_receive.o(i.BarTextTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = BarTextTask &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos.o(.constdata)
</UL>
<P><STRONG><a name="[b4]"></a>BooTask</STRONG> (Thumb, 208 bytes, Stack size 16 bytes, chassis_control.o(i.BooTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = BooTask &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Boo
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_US_NUM
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_speed
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> chassis_control.o(.constdata)
</UL>
<P><STRONG><a name="[3a]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[ef]"></a>Change_Hight</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, read_status_task.o(i.Change_Hight))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = Change_Hight &rArr; ActionGroup &rArr; Error_Report &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait_Servo_Signal
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActionGroup
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ladder_process
</UL>

<P><STRONG><a name="[f1]"></a>Chassis_decode</STRONG> (Thumb, 520 bytes, Stack size 40 bytes, track_bar_receive.o(i.Chassis_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Chassis_decode &rArr; Count_BarCount
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;turn_uint16
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_sw
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_HW
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count_bar
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;all_data_clear
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_TRckerCounter
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_AvaibleRow_ID
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Count_BarCount
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;track_scan
</UL>

<P><STRONG><a name="[f]"></a>Circle_around</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, chassis_control.o(i.Circle_around))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = Circle_around &rArr; Turn_angle &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_InitYaw
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Yaw
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_imu_status
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_HW_others
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Turn_angle
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_speed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[ed]"></a>Clear_Boo</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, track_bar_receive.o(i.Clear_Boo))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BooTask
</UL>

<P><STRONG><a name="[173]"></a>Clear_MV_param</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, openmv.o(i.Clear_MV_param))
<BR><BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QR_decode
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ladder_process
</UL>

<P><STRONG><a name="[175]"></a>Clear_QR_Color</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, qr_code.o(i.Clear_QR_Color))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ladder_process
</UL>

<P><STRONG><a name="[fb]"></a>Comfirm_Online</STRONG> (Thumb, 218 bytes, Stack size 16 bytes, chassis_control.o(i.Comfirm_Online))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Comfirm_Online &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_IMUStatus
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Trcker_Num
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;track_status
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_speed
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LineTask
</UL>

<P><STRONG><a name="[f6]"></a>Count_BarCount</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, track_bar_receive.o(i.Count_BarCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Count_BarCount
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis_decode
</UL>

<P><STRONG><a name="[4c]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.DMA1_Stream1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA1_Stream1_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.DMA1_Stream3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA1_Stream3_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[fe]"></a>Data_Rebuild</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, hwt101_imu.o(i.Data_Rebuild))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Data_Rebuild &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>

<P><STRONG><a name="[3d]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[198]"></a>Disable_ServoFlag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, servo.o(i.Disable_ServoFlag))
<BR><BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QR_decode
</UL>

<P><STRONG><a name="[16d]"></a>Disable_StopSignal</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, openmv.o(i.Disable_StopSignal))
<BR><BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QR_decode
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;begin_servo_status
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ladder_process
</UL>

<P><STRONG><a name="[2b]"></a>Dump_RoundRing</STRONG> (Thumb, 442 bytes, Stack size 40 bytes, general_interface.o(i.Dump_RoundRing))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = Dump_RoundRing &rArr; Turn_angle &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_InitYaw
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_imu_status
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Turn_angle
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait_Servo_Signal
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_speed
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActionGroup
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_inch
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_red
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_blue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[28]"></a>Dump_ball</STRONG> (Thumb, 644 bytes, Stack size 48 bytes, general_interface.o(i.Dump_ball))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = Dump_ball &rArr; move_by_encoder &rArr; osThreadCreate &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_InitYaw
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_imu_status
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_HW
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_by_encoder
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait_OKInf
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Turn_angle
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait_Servo_Signal
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_speed
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActionGroup
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_inch
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_red
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_blue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[2a]"></a>Dump_block</STRONG> (Thumb, 276 bytes, Stack size 24 bytes, general_interface.o(i.Dump_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = Dump_block &rArr; ActionGroup &rArr; Error_Report &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_InitYaw
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_imu_status
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_HW
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait_Servo_Signal
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_speed
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActionGroup
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_red
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_blue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[68]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32f7xx_it.o(i.EXTI15_10_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = EXTI15_10_IRQHandler &rArr; avoid_callback &rArr; distance_convert &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avoid_callback
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[1bd]"></a>Enable_ServoFlag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, servo.o(i.Enable_ServoFlag))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_round
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_ball
</UL>

<P><STRONG><a name="[168]"></a>Enable_StopSignal</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, openmv.o(i.Enable_StopSignal))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HeightUpdate_Task
</UL>

<P><STRONG><a name="[b3]"></a>EncoderTask</STRONG> (Thumb, 780 bytes, Stack size 72 bytes, chassis_control.o(i.EncoderTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = EncoderTask &rArr; vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_motor_data
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Limit_Speed
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;track_status
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_speed
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fabs
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dneg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> chassis_control.o(.constdata)
</UL>
<P><STRONG><a name="[160]"></a>Error_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(i.Error_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART6_UART_Init
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART8_Init
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART7_Init
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART5_Init
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART4_Init
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM6_Init
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM5_Init
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM10_Init
</UL>

<P><STRONG><a name="[ea]"></a>Error_Report</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, servo.o(i.Error_Report))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = Error_Report &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActionGroup
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServoInfBack_IRQ
</UL>

<P><STRONG><a name="[f3]"></a>Get_AvaibleRow_ID</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, track_bar_receive.o(i.Get_AvaibleRow_ID))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis_decode
</UL>

<P><STRONG><a name="[195]"></a>Get_BarCount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, track_bar_receive.o(i.Get_BarCount))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_CountBar
</UL>

<P><STRONG><a name="[1a3]"></a>Get_EmptyRow_ID</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, track_bar_receive.o(i.Get_EmptyRow_ID))
<BR><BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Track_RX_IRQ
</UL>

<P><STRONG><a name="[1bb]"></a>Get_FirstFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, openmv.o(i.Get_FirstFlag))
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_ball
</UL>

<P><STRONG><a name="[103]"></a>Get_HW</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, track_bar_receive.o(i.Get_HW))
<BR><BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;centren_control
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blue_all
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dump_block
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dump_ball
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWSwitch_Move
</UL>

<P><STRONG><a name="[22]"></a>Get_HW1</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, track_bar_receive.o(i.Get_HW1))
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[110]"></a>Get_HW_LEFT</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, general_interface.o(i.Get_HW_LEFT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Get_HW_LEFT
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_round
</UL>

<P><STRONG><a name="[112]"></a>Get_HW_RIGHT</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, general_interface.o(i.Get_HW_RIGHT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Get_HW_RIGHT
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_round
</UL>

<P><STRONG><a name="[fa]"></a>Get_HW_others</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, track_bar_receive.o(i.Get_HW_others))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Get_HW_others
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Circle_around
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_ladder
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Restart_Ladder
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ladder_process
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWSwitch_Move
</UL>

<P><STRONG><a name="[179]"></a>Get_Height</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, read_status_task.o(i.Get_Height))
<BR><BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QR_decode
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MV_Decode
</UL>

<P><STRONG><a name="[113]"></a>Get_Hight_HW_new</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, track_bar_receive.o(i.Get_Hight_HW_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Get_Hight_HW_new
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HeightUpdate_Task
</UL>

<P><STRONG><a name="[114]"></a>Get_Home1</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, general_interface.o(i.Get_Home1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Get_Home1
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_home
</UL>

<P><STRONG><a name="[115]"></a>Get_Home2</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, general_interface.o(i.Get_Home2))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Get_Home2
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_home
</UL>

<P><STRONG><a name="[171]"></a>Get_MV_param</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, openmv.o(i.Get_MV_param))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ladder_process
</UL>

<P><STRONG><a name="[172]"></a>Get_QR_finish</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, qr_code.o(i.Get_QR_finish))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ladder_process
</UL>

<P><STRONG><a name="[19b]"></a>Get_SW</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, track_bar_receive.o(i.Get_SW))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait_Switches
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Swicth
</UL>

<P><STRONG><a name="[165]"></a>Get_Servo_Flag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, servo.o(i.Get_Servo_Flag))
<BR><BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MV_Decode
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ladder_process
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HeightUpdate_Task
</UL>

<P><STRONG><a name="[170]"></a>Get_Stop_Signal</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, openmv.o(i.Get_Stop_Signal))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ladder_process
</UL>

<P><STRONG><a name="[1b1]"></a>Get_Time_Period</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, time_cnt.o(i.Get_Time_Period))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Get_Time_Period
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_control
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avoid_callback
</UL>

<P><STRONG><a name="[fc]"></a>Get_Trcker_Num</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, track_bar_receive.o(i.Get_Trcker_Num))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comfirm_Online
</UL>

<P><STRONG><a name="[1e7]"></a>Get_US_Distance</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, track_bar_receive.o(i.Get_US_Distance))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_round
</UL>

<P><STRONG><a name="[ec]"></a>Get_US_NUM</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, track_bar_receive.o(i.Get_US_NUM))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BooTask
</UL>

<P><STRONG><a name="[e7]"></a>Get_Uint16_Transform</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, servo.o(i.Get_Uint16_Transform))
<BR><BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActionGroup
</UL>

<P><STRONG><a name="[4]"></a>Get_Yaw</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hwt101_imu.o(i.Get_Yaw))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Circle_around
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_round
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hwt101_imu.o(.data)
</UL>
<P><STRONG><a name="[167]"></a>Get_minute</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, time_cnt.o(i.Get_minute))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HeightUpdate_Task
</UL>

<P><STRONG><a name="[166]"></a>Get_second</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, time_cnt.o(i.Get_second))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HeightUpdate_Task
</UL>

<P><STRONG><a name="[116]"></a>HAL_DMA_Abort</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, stm32f7xx_hal_dma.o(i.HAL_DMA_Abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[157]"></a>HAL_DMA_Abort_IT</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f7xx_hal_dma.o(i.HAL_DMA_Abort_IT))
<BR><BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[fd]"></a>HAL_DMA_IRQHandler</STRONG> (Thumb, 412 bytes, Stack size 32 bytes, stm32f7xx_hal_dma.o(i.HAL_DMA_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_DMA_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream3_IRQHandler
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream1_IRQHandler
</UL>

<P><STRONG><a name="[118]"></a>HAL_DMA_Init</STRONG> (Thumb, 206 bytes, Stack size 24 bytes, stm32f7xx_hal_dma.o(i.HAL_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_DMA_Init &rArr; DMA_CheckFifoParam
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CheckFifoParam
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CalcBaseAndBitshift
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[11b]"></a>HAL_GPIO_EXTI_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_gpio.o(i.HAL_GPIO_EXTI_Callback))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>

<P><STRONG><a name="[105]"></a>HAL_GPIO_EXTI_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32f7xx_hal_gpio.o(i.HAL_GPIO_EXTI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
</UL>

<P><STRONG><a name="[13d]"></a>HAL_GPIO_Init</STRONG> (Thumb, 410 bytes, Stack size 40 bytes, stm32f7xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_MspInit
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avoid_callback
</UL>

<P><STRONG><a name="[111]"></a>HAL_GPIO_ReadPin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f7xx_hal_gpio.o(i.HAL_GPIO_ReadPin))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Hight_HW_new
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_HW_others
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Home2
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Home1
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_HW_RIGHT
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_HW_LEFT
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Swicth
</UL>

<P><STRONG><a name="[183]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f7xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_Init
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T6_IRQHandler
</UL>

<P><STRONG><a name="[117]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f7xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnableOverDrive
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[154]"></a>HAL_IncTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f7xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[11c]"></a>HAL_Init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f7xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11e]"></a>HAL_InitTick</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, stm32f7xx_hal_timebase_tim.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetClockConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[11f]"></a>HAL_MspInit</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32f7xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[121]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f7xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_MspInit
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[120]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32f7xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_MspInit
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>

<P><STRONG><a name="[11d]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f7xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[127]"></a>HAL_PWREx_EnableOverDrive</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, stm32f7xx_hal_pwr_ex.o(i.HAL_PWREx_EnableOverDrive))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_PWREx_EnableOverDrive
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[128]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 1272 bytes, Stack size 40 bytes, stm32f7xx_hal_rcc_ex.o(i.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[129]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 296 bytes, Stack size 32 bytes, stm32f7xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[122]"></a>HAL_RCC_GetClockConfig</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, stm32f7xx_hal_rcc.o(i.HAL_RCC_GetClockConfig))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[123]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f7xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[1a7]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f7xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[12a]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, stm32f7xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[12c]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 864 bytes, Stack size 40 bytes, stm32f7xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[145]"></a>HAL_TIMEx_Break2Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_tim_ex.o(i.HAL_TIMEx_Break2Callback))
<BR><BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[144]"></a>HAL_TIMEx_BreakCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_tim_ex.o(i.HAL_TIMEx_BreakCallback))
<BR><BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[147]"></a>HAL_TIMEx_CommutCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_tim_ex.o(i.HAL_TIMEx_CommutCallback))
<BR><BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[187]"></a>HAL_TIMEx_ConfigBreakDeadTime</STRONG> (Thumb, 132 bytes, Stack size 12 bytes, stm32f7xx_hal_tim_ex.o(i.HAL_TIMEx_ConfigBreakDeadTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_TIMEx_ConfigBreakDeadTime
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
</UL>

<P><STRONG><a name="[186]"></a>HAL_TIMEx_MasterConfigSynchronization</STRONG> (Thumb, 136 bytes, Stack size 20 bytes, stm32f7xx_hal_tim_ex.o(i.HAL_TIMEx_MasterConfigSynchronization))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_TIMEx_MasterConfigSynchronization
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM6_Init
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM5_Init
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
</UL>

<P><STRONG><a name="[124]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, stm32f7xx_hal_tim.o(i.HAL_TIM_Base_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM6_Init
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM10_Init
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[12d]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, tim.o(i.HAL_TIM_Base_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[1be]"></a>HAL_TIM_Base_Start</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, stm32f7xx_hal_tim.o(i.HAL_TIM_Base_Start))
<BR><BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
</UL>

<P><STRONG><a name="[125]"></a>HAL_TIM_Base_Start_IT</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, stm32f7xx_hal_tim.o(i.HAL_TIM_Base_Start_IT))
<BR><BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_Init
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[12f]"></a>HAL_TIM_ConfigClockSource</STRONG> (Thumb, 214 bytes, Stack size 16 bytes, stm32f7xx_hal_tim.o(i.HAL_TIM_ConfigClockSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_TIM_ConfigClockSource &rArr; TIM_ETR_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITRx_SetConfig
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETR_SetConfig
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI2_ConfigInputStage
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI1_ConfigInputStage
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
</UL>

<P><STRONG><a name="[134]"></a>HAL_TIM_IC_CaptureCallback</STRONG> (Thumb, 2004 bytes, Stack size 80 bytes, tim_control.o(i.HAL_TIM_IC_CaptureCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = HAL_TIM_IC_CaptureCallback &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ReadCapturedValue
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fabs
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[137]"></a>HAL_TIM_IC_ConfigChannel</STRONG> (Thumb, 270 bytes, Stack size 24 bytes, stm32f7xx_hal_tim.o(i.HAL_TIM_IC_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_TIM_IC_ConfigChannel &rArr; TIM_TI1_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI1_SetConfig
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI2_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM5_Init
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
</UL>

<P><STRONG><a name="[13a]"></a>HAL_TIM_IC_Init</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, stm32f7xx_hal_tim.o(i.HAL_TIM_IC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_TIM_IC_Init &rArr; HAL_TIM_IC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_MspInit
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM5_Init
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
</UL>

<P><STRONG><a name="[13b]"></a>HAL_TIM_IC_MspInit</STRONG> (Thumb, 204 bytes, Stack size 40 bytes, tim.o(i.HAL_TIM_IC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_TIM_IC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_Init
</UL>

<P><STRONG><a name="[13e]"></a>HAL_TIM_IC_Start_IT</STRONG> (Thumb, 314 bytes, Stack size 8 bytes, stm32f7xx_hal_tim.o(i.HAL_TIM_IC_Start_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_IC_Start_IT &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_init
</UL>

<P><STRONG><a name="[140]"></a>HAL_TIM_IRQHandler</STRONG> (Thumb, 388 bytes, Stack size 16 bytes, stm32f7xx_hal_tim.o(i.HAL_TIM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = HAL_TIM_IRQHandler &rArr; HAL_TIM_IC_CaptureCallback &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_TriggerCallback
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_PulseFinishedCallback
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_DelayElapsedCallback
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_CommutCallback
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_BreakCallback
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_Break2Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM7_IRQHandler
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_DAC_IRQHandler
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_IRQHandler
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_UP_TIM10_IRQHandler
</UL>

<P><STRONG><a name="[148]"></a>HAL_TIM_MspPostInit</STRONG> (Thumb, 146 bytes, Stack size 40 bytes, tim.o(i.HAL_TIM_MspPostInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_TIM_MspPostInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
</UL>

<P><STRONG><a name="[141]"></a>HAL_TIM_OC_DelayElapsedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_tim.o(i.HAL_TIM_OC_DelayElapsedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[149]"></a>HAL_TIM_PWM_ConfigChannel</STRONG> (Thumb, 286 bytes, Stack size 16 bytes, stm32f7xx_hal_tim.o(i.HAL_TIM_PWM_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_TIM_PWM_ConfigChannel &rArr; TIM_OC3_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3_SetConfig
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1_SetConfig
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2_SetConfig
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC6_SetConfig
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC5_SetConfig
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
</UL>

<P><STRONG><a name="[150]"></a>HAL_TIM_PWM_Init</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, stm32f7xx_hal_tim.o(i.HAL_TIM_PWM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_TIM_PWM_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_MspInit
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
</UL>

<P><STRONG><a name="[151]"></a>HAL_TIM_PWM_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_tim.o(i.HAL_TIM_PWM_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
</UL>

<P><STRONG><a name="[142]"></a>HAL_TIM_PWM_PulseFinishedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_tim.o(i.HAL_TIM_PWM_PulseFinishedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[152]"></a>HAL_TIM_PWM_Start</STRONG> (Thumb, 224 bytes, Stack size 8 bytes, stm32f7xx_hal_tim.o(i.HAL_TIM_PWM_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_PWM_Start &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_init
</UL>

<P><STRONG><a name="[143]"></a>HAL_TIM_PeriodElapsedCallback</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, main.o(i.HAL_TIM_PeriodElapsedCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_TIM_PeriodElapsedCallback &rArr; MY_PeriodElapsedCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MY_PeriodElapsedCallback
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[135]"></a>HAL_TIM_ReadCapturedValue</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm32f7xx_hal_tim.o(i.HAL_TIM_ReadCapturedValue))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
</UL>

<P><STRONG><a name="[146]"></a>HAL_TIM_TriggerCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_tim.o(i.HAL_TIM_TriggerCallback))
<BR><BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[159]"></a>HAL_UARTEx_RxEventCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_uart.o(i.HAL_UARTEx_RxEventCallback))
<BR><BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_8BIT
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_16BIT
</UL>

<P><STRONG><a name="[158]"></a>HAL_UART_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_uart.o(i.HAL_UART_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAAbortOnError
</UL>

<P><STRONG><a name="[155]"></a>HAL_UART_IRQHandler</STRONG> (Thumb, 536 bytes, Stack size 24 bytes, stm32f7xx_hal_uart.o(i.HAL_UART_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_UART_IRQHandler &rArr; HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_IRQHandler
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART7_IRQHandler
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
</UL>

<P><STRONG><a name="[15b]"></a>HAL_UART_Init</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, stm32f7xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_AdvFeatureConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART6_UART_Init
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART8_Init
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART7_Init
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART5_Init
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART4_Init
</UL>

<P><STRONG><a name="[15c]"></a>HAL_UART_MspInit</STRONG> (Thumb, 788 bytes, Stack size 64 bytes, usart.o(i.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[161]"></a>HAL_UART_Receive_IT</STRONG> (Thumb, 62 bytes, Stack size 4 bytes, stm32f7xx_hal_uart.o(i.HAL_UART_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_UART_Receive_IT &rArr; UART_Start_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Start_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Imu_Init
</UL>

<P><STRONG><a name="[163]"></a>HAL_UART_RxCpltCallback</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, hwt101_imu.o(i.HAL_UART_RxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_UART_RxCpltCallback &rArr; Data_Rebuild &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Rebuild
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_8BIT
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_16BIT
</UL>

<P><STRONG><a name="[e8]"></a>HAL_UART_Transmit</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, stm32f7xx_hal_uart.o(i.HAL_UART_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_InitYaw
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActionGroup
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MV_SendCmd
</UL>

<P><STRONG><a name="[15a]"></a>HAL_UART_TxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_uart.o(i.HAL_UART_TxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[23]"></a>HWSwitch_Move</STRONG> (Thumb, 620 bytes, Stack size 24 bytes, read_status_task.o(i.HWSwitch_Move))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HWSwitch_Move &rArr; Set_InitYaw &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_InitYaw
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_IMUStatus
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_HW_others
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_HW
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_speed
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[38]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[b5]"></a>HeightUpdate_Task</STRONG> (Thumb, 404 bytes, Stack size 24 bytes, read_status_task.o(i.HeightUpdate_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = HeightUpdate_Task &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_second
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_minute
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Hight_HW_new
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Servo_Flag
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_StopSignal
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_second
</UL>
<BR>[Address Reference Count : 1]<UL><LI> read_status_task.o(.constdata)
</UL>
<P><STRONG><a name="[16a]"></a>Imu_Init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hwt101_imu.o(i.Imu_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Imu_Init &rArr; HAL_UART_Receive_IT &rArr; UART_Start_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_Init
</UL>

<P><STRONG><a name="[194]"></a>Init_BarCount</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, track_bar_receive.o(i.Init_BarCount))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_CountBar
</UL>

<P><STRONG><a name="[1d]"></a>Judge_Side</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, read_status_task.o(i.Judge_Side))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ladder_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[2f]"></a>Ladder_process</STRONG> (Thumb, 454 bytes, Stack size 32 bytes, read_status_task.o(i.Ladder_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = Ladder_process &rArr; Set_QueryState &rArr; MV_QueryTask_Start &rArr; osThreadCreate &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_IMUStatus
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_HW_others
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_QR_once
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_QR_finish
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_QR_Target
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_QR_finish
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_QR_Color
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait_Servo_Signal
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_speed
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Servo_Flag
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActionGroup
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnt_clear
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_QueryState
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_MV_once
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MV_SendCmd
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Stop_Signal
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_MV_param
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disable_StopSignal
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_MV_param
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;begin_servo_status
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_HeightUpdate
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_Side
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Change_Hight
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_ladder
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[10f]"></a>Limit_Speed</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, chassis_control.o(i.Limit_Speed))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncoderTask
</UL>

<P><STRONG><a name="[b2]"></a>LineTask</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, chassis_control.o(i.LineTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = LineTask &rArr; Turn_angle &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Turn_angle
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comfirm_Online
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_speed
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> chassis_control.o(.constdata)
</UL>
<P><STRONG><a name="[177]"></a>MV_Decode</STRONG> (Thumb, 238 bytes, Stack size 16 bytes, openmv.o(i.MV_Decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = MV_Decode &rArr; Set_QueryState &rArr; MV_QueryTask_Start &rArr; osThreadCreate &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_speed
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_HeightAvailable
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Servo_Flag
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Height
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActionGroup
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_QueryState
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MV_rec_decode
</UL>

<P><STRONG><a name="[17a]"></a>MV_IRQ</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, openmv.o(i.MV_IRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = MV_IRQ &rArr; MV_rec_decode &rArr; MV_Decode &rArr; Set_QueryState &rArr; MV_QueryTask_Start &rArr; osThreadCreate &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QR_LoadData
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MV_rec_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
</UL>

<P><STRONG><a name="[b1]"></a>MV_QueryTaskFunc</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, openmv.o(i.MV_QueryTaskFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = MV_QueryTaskFunc &rArr; MV_SendCmd &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MV_SendCmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> openmv.o(.constdata)
</UL>
<P><STRONG><a name="[17d]"></a>MV_QueryTask_Start</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, openmv.o(i.MV_QueryTask_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = MV_QueryTask_Start &rArr; osThreadCreate &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_QueryState
</UL>

<P><STRONG><a name="[15]"></a>MV_SendCmd</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, openmv.o(i.MV_SendCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = MV_SendCmd &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_encode
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MV_Stop
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MV_Start
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MV_QueryTaskFunc
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_round
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_ball
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ladder_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[13]"></a>MV_Start</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, openmv.o(i.MV_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = MV_Start &rArr; MV_SendCmd &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MV_SendCmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[14]"></a>MV_Stop</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, openmv.o(i.MV_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = MV_Stop &rArr; MV_SendCmd &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MV_SendCmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[17c]"></a>MV_rec_decode</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, openmv.o(i.MV_rec_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = MV_rec_decode &rArr; MV_Decode &rArr; Set_QueryState &rArr; MV_QueryTask_Start &rArr; osThreadCreate &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MV_Decode
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MV_IRQ
</UL>

<P><STRONG><a name="[180]"></a>MX_DMA_Init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, dma.o(i.MX_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MX_DMA_Init &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[181]"></a>MX_FREERTOS_Init</STRONG> (Thumb, 140 bytes, Stack size 176 bytes, freertos.o(i.MX_FREERTOS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = MX_FREERTOS_Init &rArr; osThreadCreate &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[182]"></a>MX_GPIO_Init</STRONG> (Thumb, 442 bytes, Stack size 64 bytes, gpio.o(i.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MX_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[184]"></a>MX_TIM10_Init</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, tim.o(i.MX_TIM10_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MX_TIM10_Init &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[185]"></a>MX_TIM1_Init</STRONG> (Thumb, 260 bytes, Stack size 112 bytes, tim.o(i.MX_TIM1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = MX_TIM1_Init &rArr; HAL_TIM_MspPostInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_ConfigBreakDeadTime
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[188]"></a>MX_TIM2_Init</STRONG> (Thumb, 202 bytes, Stack size 72 bytes, tim.o(i.MX_TIM2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = MX_TIM2_Init &rArr; HAL_TIM_MspPostInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[189]"></a>MX_TIM3_Init</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, tim.o(i.MX_TIM3_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = MX_TIM3_Init &rArr; HAL_TIM_IC_Init &rArr; HAL_TIM_IC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_Init
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_ConfigChannel
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[18a]"></a>MX_TIM5_Init</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, tim.o(i.MX_TIM5_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = MX_TIM5_Init &rArr; HAL_TIM_IC_Init &rArr; HAL_TIM_IC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_Init
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_ConfigChannel
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[18b]"></a>MX_TIM6_Init</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, tim.o(i.MX_TIM6_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MX_TIM6_Init &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[18c]"></a>MX_UART4_Init</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, usart.o(i.MX_UART4_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = MX_UART4_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[18d]"></a>MX_UART5_Init</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, usart.o(i.MX_UART5_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = MX_UART5_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[18e]"></a>MX_UART7_Init</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, usart.o(i.MX_UART7_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = MX_UART7_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[18f]"></a>MX_UART8_Init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, usart.o(i.MX_UART8_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = MX_UART8_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[190]"></a>MX_USART1_UART_Init</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, usart.o(i.MX_USART1_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = MX_USART1_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[191]"></a>MX_USART2_UART_Init</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, usart.o(i.MX_USART2_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = MX_USART2_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[192]"></a>MX_USART3_UART_Init</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, usart.o(i.MX_USART3_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = MX_USART3_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[193]"></a>MX_USART6_UART_Init</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, usart.o(i.MX_USART6_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = MX_USART6_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[153]"></a>MY_PeriodElapsedCallback</STRONG> (Thumb, 174 bytes, Stack size 20 bytes, tim_control.o(i.MY_PeriodElapsedCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = MY_PeriodElapsedCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[39]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[1ac]"></a>Motor_PID1_Init</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, motor.o(i.Motor_PID1_Init))
<BR><BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_Init
</UL>

<P><STRONG><a name="[1ab]"></a>Motor_PID_Init</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, motor.o(i.Motor_PID_Init))
<BR><BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_Init
</UL>

<P><STRONG><a name="[1b]"></a>Move_CountBar</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, general_interface.o(i.Move_CountBar))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Move_CountBar &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_imu_status
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_BarCount
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_BarCount
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_speed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[31]"></a>Move_inch</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, general_interface.o(i.Move_inch))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Move_inch &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_speed
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;centren_control
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_round
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_home
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blue_all
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Restart_Ladder
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dump_ball
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dump_RoundRing
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[37]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.NMI_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[17b]"></a>QR_LoadData</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, qr_code.o(i.QR_LoadData))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = QR_LoadData &rArr; QR_decode &rArr; ActionGroup &rArr; Error_Report &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QR_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MV_IRQ
</UL>

<P><STRONG><a name="[196]"></a>QR_decode</STRONG> (Thumb, 226 bytes, Stack size 16 bytes, qr_code.o(i.QR_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = QR_decode &rArr; ActionGroup &rArr; Error_Report &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetUpdateQR
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disable_ServoFlag
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Height
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActionGroup
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_rectangle_count
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_MV_Mode
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disable_StopSignal
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_MV_param
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QR_LoadData
</UL>

<P><STRONG><a name="[b6]"></a>Read_Swicth</STRONG> (Thumb, 338 bytes, Stack size 40 bytes, read_status_task.o(i.Read_Swicth))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = Read_Swicth &rArr; vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_SW
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> read_status_task.o(.constdata)
</UL>
<P><STRONG><a name="[2c]"></a>Restart_Ladder</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, general_interface.o(i.Restart_Ladder))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = Restart_Ladder &rArr; ActionGroup &rArr; Error_Report &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_HW_others
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait_Servo_Signal
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_speed
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActionGroup
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_inch
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_ladder
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[19c]"></a>ServoInfBack_IRQ</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, servo.o(i.ServoInfBack_IRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = ServoInfBack_IRQ &rArr; Error_Report &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Report
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
</UL>

<P><STRONG><a name="[19a]"></a>SetUpdateQR</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, qr_code.o(i.SetUpdateQR))
<BR><BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QR_decode
</UL>

<P><STRONG><a name="[1bc]"></a>Set_FirstFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, openmv.o(i.Set_FirstFlag))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_round
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_ball
</UL>

<P><STRONG><a name="[178]"></a>Set_HeightAvailable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, read_status_task.o(i.Set_HeightAvailable))
<BR><BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MV_Decode
</UL>

<P><STRONG><a name="[24]"></a>Set_IMUStatus</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hwt101_imu.o(i.Set_IMUStatus))
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_yuan
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comfirm_Online
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ladder_process
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWSwitch_Move
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[18]"></a>Set_InitYaw</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, hwt101_imu.o(i.Set_InitYaw))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Set_InitYaw &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Circle_around
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_round
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_ladder
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_home
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_ball
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blue_all
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dump_block
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dump_ball
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dump_RoundRing
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWSwitch_Move
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[197]"></a>Set_MV_Mode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, openmv.o(i.Set_MV_Mode))
<BR><BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QR_decode
</UL>

<P><STRONG><a name="[16e]"></a>Set_MV_once</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, openmv.o(i.Set_MV_once))
<BR><BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;begin_servo_status
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ladder_process
</UL>

<P><STRONG><a name="[16b]"></a>Set_QR_Target</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, qr_code.o(i.Set_QR_Target))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = Set_QR_Target &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ladder_process
</UL>

<P><STRONG><a name="[176]"></a>Set_QR_finish</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, qr_code.o(i.Set_QR_finish))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ladder_process
</UL>

<P><STRONG><a name="[16c]"></a>Set_QR_once</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, qr_code.o(i.Set_QR_once))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ladder_process
</UL>

<P><STRONG><a name="[10]"></a>Set_QueryState</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, openmv.o(i.Set_QueryState))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = Set_QueryState &rArr; MV_QueryTask_Start &rArr; osThreadCreate &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MV_QueryTask_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MV_Decode
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_round
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_ball
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ladder_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[ab]"></a>StartDefaultTask</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, freertos.o(i.StartDefaultTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + In Cycle
<LI>Call Chain = StartDefaultTask &rArr;  StartDefaultTask (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartDefaultTask
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartDefaultTask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos.o(.constdata)
</UL>
<P><STRONG><a name="[1c]"></a>Start_HeightUpdate</STRONG> (Thumb, 42 bytes, Stack size 40 bytes, read_status_task.o(i.Start_HeightUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = Start_HeightUpdate &rArr; osThreadCreate &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ladder_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[1e]"></a>Start_Read_Switch</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, read_status_task.o(i.Start_Read_Switch))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = Start_Read_Switch &rArr; osThreadCreate &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[ac]"></a>Startdebug</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, debug_task.o(i.Startdebug))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = Startdebug &rArr;  Startdebug (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_debug_motor
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_debug
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_speed
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Startdebug
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Startdebug
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos.o(.constdata)
</UL>
<P><STRONG><a name="[3f]"></a>SysTick_Handler</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, port.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SysTick_Handler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[1a0]"></a>SystemClock_Config</STRONG> (Thumb, 190 bytes, Stack size 216 bytes, main.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnableOverDrive
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a2]"></a>SystemInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, system_stm32f7xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(.text)
</UL>
<P><STRONG><a name="[1a1]"></a>T6_IRQHandler</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, time_cnt.o(i.T6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = T6_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_DAC_IRQHandler
</UL>

<P><STRONG><a name="[59]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32f7xx_it.o(i.TIM1_UP_TIM10_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = TIM1_UP_TIM10_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_IC_CaptureCallback &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>TIM3_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.TIM3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = TIM3_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_IC_CaptureCallback &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>TIM5_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.TIM5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = TIM5_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_IC_CaptureCallback &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32f7xx_it.o(i.TIM6_DAC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = TIM6_DAC_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_IC_CaptureCallback &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T6_IRQHandler
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>TIM7_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.TIM7_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = TIM7_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_IC_CaptureCallback &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[12e]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 156 bytes, Stack size 20 bytes, stm32f7xx_hal_tim.o(i.TIM_Base_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_Init
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[13f]"></a>TIM_CCxChannelCmd</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32f7xx_hal_tim.o(i.TIM_CCxChannelCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Start
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_Start_IT
</UL>

<P><STRONG><a name="[130]"></a>TIM_ETR_SetConfig</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f7xx_hal_tim.o(i.TIM_ETR_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_ETR_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[14b]"></a>TIM_OC2_SetConfig</STRONG> (Thumb, 102 bytes, Stack size 20 bytes, stm32f7xx_hal_tim.o(i.TIM_OC2_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_OC2_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[138]"></a>TIM_TI1_SetConfig</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, stm32f7xx_hal_tim.o(i.TIM_TI1_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_TI1_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_ConfigChannel
</UL>

<P><STRONG><a name="[1a2]"></a>Track_RX_IRQ</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, track_bar_receive.o(i.Track_RX_IRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Track_RX_IRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_EmptyRow_ID
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_IRQHandler
</UL>

<P><STRONG><a name="[19]"></a>Turn_angle</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, imu_pid.o(i.Turn_angle))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = Turn_angle &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;angle_limit
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_speed
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LineTask
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Circle_around
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_round
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_home
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dump_ball
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dump_RoundRing
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[1a5]"></a>U1_IRQHandler</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, uart_handle.o(i.U1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = U1_IRQHandler &rArr; xQueueReceiveFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[74]"></a>UART4_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f7xx_it.o(i.UART4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = UART4_IRQHandler &rArr; MV_IRQ &rArr; MV_rec_decode &rArr; MV_Decode &rArr; Set_QueryState &rArr; MV_QueryTask_Start &rArr; osThreadCreate &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MV_IRQ
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>UART5_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f7xx_it.o(i.UART5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = UART5_IRQHandler &rArr; ServoInfBack_IRQ &rArr; Error_Report &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServoInfBack_IRQ
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[92]"></a>UART7_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.UART7_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UART7_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[15e]"></a>UART_AdvFeatureConfig</STRONG> (Thumb, 200 bytes, Stack size 0 bytes, stm32f7xx_hal_uart.o(i.UART_AdvFeatureConfig))
<BR><BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[15f]"></a>UART_CheckIdleState</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, stm32f7xx_hal_uart.o(i.UART_CheckIdleState))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UART_CheckIdleState &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[15d]"></a>UART_SetConfig</STRONG> (Thumb, 520 bytes, Stack size 16 bytes, stm32f7xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = UART_SetConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[162]"></a>UART_Start_Receive_IT</STRONG> (Thumb, 134 bytes, Stack size 12 bytes, stm32f7xx_hal_uart.o(i.UART_Start_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = UART_Start_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
</UL>

<P><STRONG><a name="[164]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, stm32f7xx_hal_uart.o(i.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[65]"></a>USART1_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f7xx_it.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = USART1_IRQHandler &rArr; U1_IRQHandler &rArr; xQueueReceiveFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U1_IRQHandler
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>USART2_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USART2_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>USART3_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USART3_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[87]"></a>USART6_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f7xx_it.o(i.USART6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USART6_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Track_RX_IRQ
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[1a8]"></a>USER_Init</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, main.o(i.USER_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = USER_Init &rArr; printf_init &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;track_status
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;track_bar_init
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_chassis_status
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_init
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_init
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_PID_Init
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_PID1_Init
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Imu_Init
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f2]"></a>Update_TRckerCounter</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, track_bar_receive.o(i.Update_TRckerCounter))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis_decode
</UL>

<P><STRONG><a name="[199]"></a>Update_rectangle_count</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, openmv.o(i.Update_rectangle_count))
<BR><BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QR_decode
</UL>

<P><STRONG><a name="[3b]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f750xx.o(RESET)
</UL>
<P><STRONG><a name="[102]"></a>Wait_OKInf</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, chassis_control.o(i.Wait_OKInf))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Wait_OKInf &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_home
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dump_ball
</UL>

<P><STRONG><a name="[f0]"></a>Wait_Servo_Signal</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, servo.o(i.Wait_Servo_Signal))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Wait_Servo_Signal &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_speed
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_round
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_ladder
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_home
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_ball
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blue_all
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Restart_Ladder
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dump_block
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dump_ball
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dump_RoundRing
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;begin_servo_status
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ladder_process
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Change_Hight
</UL>

<P><STRONG><a name="[16]"></a>Wait_Switches</STRONG> (Thumb, 298 bytes, Stack size 48 bytes, read_status_task.o(i.Wait_Switches))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = Wait_Switches &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_imu_status
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_SW
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_speed
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait_Switches_Time
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[20]"></a>Wait_Switches_Time</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, read_status_task.o(i.Wait_Switches_Time))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = Wait_Switches_Time &rArr; Wait_Switches &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait_Switches
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[10d]"></a>__hardfp_fabs</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, fabs.o(i.__hardfp_fabs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __hardfp_fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncoderTask
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
</UL>

<P><STRONG><a name="[d9]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[d0]"></a>_sys_exit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, uart_handle.o(i._sys_exit))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[f9]"></a>all_data_clear</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, track_bar_receive.o(i.all_data_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = all_data_clear &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis_decode
</UL>

<P><STRONG><a name="[1a4]"></a>angle_limit</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, hwt101_imu.o(i.angle_limit))
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imu_correct_val
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Turn_angle
</UL>

<P><STRONG><a name="[104]"></a>avoid_callback</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, avoid_obs.o(i.avoid_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = avoid_callback &rArr; distance_convert &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Time_Period
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;distance_convert
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
</UL>

<P><STRONG><a name="[174]"></a>begin_servo_status</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, read_status_task.o(i.begin_servo_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = begin_servo_status &rArr; ActionGroup &rArr; Error_Report &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait_Servo_Signal
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActionGroup
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_MV_once
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disable_StopSignal
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ladder_process
</UL>

<P><STRONG><a name="[1f]"></a>blue_all</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, general_interface.o(i.blue_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = blue_all &rArr; ActionGroup &rArr; Error_Report &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_InitYaw
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_HW
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait_Servo_Signal
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_speed
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActionGroup
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_inch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[1b3]"></a>centren_control</STRONG> (Thumb, 266 bytes, Stack size 16 bytes, general_interface.o(i.centren_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = centren_control &rArr; ActionGroup &rArr; Error_Report &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_imu_status
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_imu_param
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_HW
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_speed
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActionGroup
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_inch
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_red
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_blue
</UL>

<P><STRONG><a name="[169]"></a>change_second</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, read_status_task.o(i.change_second))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HeightUpdate_Task
</UL>

<P><STRONG><a name="[21]"></a>change_w_error</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, chassis.o(i.change_w_error))
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[1b4]"></a>chassis_synthetic_control</STRONG> (Thumb, 712 bytes, Stack size 64 bytes, chassis.o(i.chassis_synthetic_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = chassis_synthetic_control &rArr; show_speed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;track_pid_cal
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_speed
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_motor
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_encoder
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_control
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imu_correct_val
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_task
</UL>

<P><STRONG><a name="[ad]"></a>chassis_task</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, chassis_task.o(i.chassis_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = chassis_task &rArr;  chassis_task (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_synthetic_control
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_task
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_task
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos.o(.constdata)
</UL>
<P><STRONG><a name="[106]"></a>clear_motor_data</STRONG> (Thumb, 314 bytes, Stack size 24 bytes, motor.o(i.clear_motor_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = clear_motor_data
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_motor_pid1
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_motor_pid
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_motor_maxparam
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncoderTask
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_round
</UL>

<P><STRONG><a name="[17f]"></a>cmd_encode</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, openmv.o(i.cmd_encode))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MV_SendCmd
</UL>

<P><STRONG><a name="[16f]"></a>cnt_clear</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, openmv.o(i.cnt_clear))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ladder_process
</UL>

<P><STRONG><a name="[29]"></a>control_ball</STRONG> (Thumb, 444 bytes, Stack size 32 bytes, general_interface.o(i.control_ball))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = control_ball &rArr; Set_QueryState &rArr; MV_QueryTask_Start &rArr; osThreadCreate &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_InitYaw
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_imu_status
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait_Servo_Signal
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_ServoFlag
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_speed
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActionGroup
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_QueryState
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_FirstFlag
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MV_SendCmd
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_FirstFlag
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_red
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_blue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[f8]"></a>count_bar</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, track_bar_receive.o(i.count_bar))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = count_bar
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis_decode
</UL>

<P><STRONG><a name="[1aa]"></a>delay_init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, delay.o(i.delay_init))
<BR><BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_Init
</UL>

<P><STRONG><a name="[1b2]"></a>distance_convert</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, avoid_obs.o(i.distance_convert))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = distance_convert &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avoid_callback
</UL>

<P><STRONG><a name="[a4]"></a>fputc</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, uart_handle.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = fputc &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortGetIPSR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file.o(.text)
</UL>
<P><STRONG><a name="[1e8]"></a>get_motor_channelA_ptr</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, motor.o(i.get_motor_channelA_ptr))
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_motor
</UL>

<P><STRONG><a name="[1e9]"></a>get_motor_channelB_ptr</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, motor.o(i.get_motor_channelB_ptr))
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_motor
</UL>

<P><STRONG><a name="[f5]"></a>go_HW</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, track_bar_receive.o(i.go_HW))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis_decode
</UL>

<P><STRONG><a name="[f4]"></a>go_sw</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, track_bar_receive.o(i.go_sw))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis_decode
</UL>

<P><STRONG><a name="[25]"></a>go_yuan</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, chassis.o(i.go_yuan))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = go_yuan
</UL>
<BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_IMUStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[1b7]"></a>imu_correct_val</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, imu_pid.o(i.imu_correct_val))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = imu_correct_val
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;angle_limit
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pos_pid_cal
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_synthetic_control
</UL>

<P><STRONG><a name="[cb]"></a>main</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = main &rArr; MX_FREERTOS_Init &rArr; osThreadCreate &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART6_UART_Init
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART8_Init
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART7_Init
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART5_Init
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART4_Init
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM6_Init
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM5_Init
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM10_Init
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FREERTOS_Init
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_Init
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[19d]"></a>motor_debug</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, motor.o(i.motor_debug))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = motor_debug &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_speed
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Startdebug
</UL>

<P><STRONG><a name="[1ae]"></a>motor_init</STRONG> (Thumb, 320 bytes, Stack size 40 bytes, motor.o(i.motor_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = motor_init &rArr; HAL_TIM_PWM_Start &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Start
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_Start_IT
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_motor
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_Init
</UL>

<P><STRONG><a name="[12]"></a>move_by_encoder</STRONG> (Thumb, 168 bytes, Stack size 48 bytes, chassis_control.o(i.move_by_encoder))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = move_by_encoder &rArr; osThreadCreate &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_speed
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_home
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dump_ball
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[eb]"></a>osDelay</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, cmsis_os.o(i.osDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarTextTask
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_debug
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;track_scan
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_task
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmartscan
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Startdebug
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LineTask
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncoderTask
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Circle_around
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BooTask
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartDefaultTask
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_by_encoder
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait_Switches
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait_OKInf
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Turn_angle
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comfirm_Online
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait_Servo_Signal
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MV_QueryTaskFunc
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;centren_control
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_round
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_red
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_ladder
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_home
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_blue
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_ball
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blue_all
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Restart_Ladder
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_inch
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_CountBar
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dump_block
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dump_ball
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dump_RoundRing
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;begin_servo_status
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Swicth
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ladder_process
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HeightUpdate_Task
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWSwitch_Move
</UL>

<P><STRONG><a name="[1c5]"></a>osKernelStart</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, cmsis_os.o(i.osKernelStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = osKernelStart &rArr; vTaskStartScheduler &rArr; xTaskCreateStatic &rArr; prvInitialiseNewTask &rArr; pxPortInitialiseStack
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[17e]"></a>osThreadCreate</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, cmsis_os.o(i.osThreadCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = osThreadCreate &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;makeFreeRtosPriority
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FREERTOS_Init
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_by_encoder
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MV_QueryTask_Start
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Read_Switch
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_HeightUpdate
</UL>

<P><STRONG><a name="[1ba]"></a>pid_clear</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, pid.o(i.pid_clear))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_motor_data
</UL>

<P><STRONG><a name="[1b9]"></a>pid_control</STRONG> (Thumb, 306 bytes, Stack size 24 bytes, pid.o(i.pid_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = pid_control &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Time_Period
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_synthetic_control
</UL>

<P><STRONG><a name="[1c4]"></a>pos_pid_cal</STRONG> (Thumb, 182 bytes, Stack size 0 bytes, pid.o(i.pos_pid_cal))
<BR><BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;track_pid_cal
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imu_correct_val
</UL>

<P><STRONG><a name="[1af]"></a>printf_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, uart_handle.o(i.printf_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = printf_init &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_Init
</UL>

<P><STRONG><a name="[1e2]"></a>pvPortMalloc</STRONG> (Thumb, 222 bytes, Stack size 24 bytes, heap_4.o(i.pvPortMalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHeapInit
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[1de]"></a>pxPortInitialiseStack</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, port.o(i.pxPortInitialiseStack))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pxPortInitialiseStack
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[1b8]"></a>read_encoder</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, motor.o(i.read_encoder))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = read_encoder &rArr; __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_speed
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_synthetic_control
</UL>

<P><STRONG><a name="[26]"></a>run_blue</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, general_interface.o(i.run_blue))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = run_blue &rArr; run_ladder &rArr; Ladder_process &rArr; Set_QueryState &rArr; MV_QueryTask_Start &rArr; osThreadCreate &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_speed
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;centren_control
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_round
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_ladder
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_home
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_ball
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dump_block
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dump_ball
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dump_RoundRing
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[2e]"></a>run_home</STRONG> (Thumb, 678 bytes, Stack size 32 bytes, general_interface.o(i.run_home))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = run_home &rArr; move_by_encoder &rArr; osThreadCreate &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_InitYaw
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_by_encoder
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait_OKInf
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Turn_angle
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait_Servo_Signal
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_speed
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActionGroup
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Home2
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Home1
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_inch
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_red
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_blue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[2d]"></a>run_ladder</STRONG> (Thumb, 352 bytes, Stack size 40 bytes, general_interface.o(i.run_ladder))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = run_ladder &rArr; Ladder_process &rArr; Set_QueryState &rArr; MV_QueryTask_Start &rArr; osThreadCreate &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_motor_pid
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_InitYaw
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_HW_others
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait_Servo_Signal
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_speed
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActionGroup
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Restart_Ladder
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ladder_process
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_red
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_blue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[27]"></a>run_red</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, general_interface.o(i.run_red))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = run_red &rArr; run_ladder &rArr; Ladder_process &rArr; Set_QueryState &rArr; MV_QueryTask_Start &rArr; osThreadCreate &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_speed
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;centren_control
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_round
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_ladder
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_home
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_ball
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dump_block
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dump_ball
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dump_RoundRing
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[30]"></a>run_round</STRONG> (Thumb, 1026 bytes, Stack size 48 bytes, general_interface.o(i.run_round))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = run_round &rArr; Set_QueryState &rArr; MV_QueryTask_Start &rArr; osThreadCreate &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_motor_data
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_InitYaw
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Yaw
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_imu_status
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_US_Distance
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Turn_angle
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait_Servo_Signal
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_ServoFlag
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_speed
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActionGroup
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_QueryState
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_FirstFlag
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MV_SendCmd
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_HW_RIGHT
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_HW_LEFT
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_inch
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_red
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_blue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[1ad]"></a>set_chassis_status</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, chassis.o(i.set_chassis_status))
<BR><BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_Init
</UL>

<P><STRONG><a name="[5]"></a>set_debug_motor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, motor.o(i.set_debug_motor))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Startdebug
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>set_debug_speed</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, motor.o(i.set_debug_speed))
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>set_imu_param</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, imu_pid.o(i.set_imu_param))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = set_imu_param &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;centren_control
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[17]"></a>set_imu_status</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, imu_pid.o(i.set_imu_status))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Circle_around
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait_Switches
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;centren_control
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_round
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_ball
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_CountBar
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dump_block
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dump_ball
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dump_RoundRing
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>set_motor</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, motor.o(i.set_motor))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = set_motor
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_motor_channelB_ptr
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_motor_channelA_ptr
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_synthetic_control
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>set_motor_debug</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, motor.o(i.set_motor_debug))
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>set_motor_maxparam</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, motor.o(i.set_motor_maxparam))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = set_motor_maxparam &rArr; clear_motor_data
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_motor_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>set_motor_pid</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, motor.o(i.set_motor_pid))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = set_motor_pid &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_motor_data
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_ladder
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>set_motor_pid1</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, motor.o(i.set_motor_pid1))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = set_motor_pid1 &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_motor_data
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[11]"></a>set_speed</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, chassis.o(i.set_speed))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = set_speed
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_debug
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LineTask
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncoderTask
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Circle_around
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BooTask
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_by_encoder
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait_Switches
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Turn_angle
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comfirm_Online
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait_Servo_Signal
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MV_Decode
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;centren_control
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_round
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_red
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_ladder
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_home
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_blue
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_ball
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blue_all
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Restart_Ladder
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_inch
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_CountBar
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dump_block
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dump_ball
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dump_RoundRing
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ladder_process
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWSwitch_Move
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>set_track_pid</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, track_bar_receive.o(i.set_track_pid))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = set_track_pid &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[19e]"></a>show_speed</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, motor.o(i.show_speed))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = show_speed &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_encoder
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_synthetic_control
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Startdebug
</UL>

<P><STRONG><a name="[1a9]"></a>track_bar_init</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, track_bar_receive.o(i.track_bar_init))
<BR><BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_Init
</UL>

<P><STRONG><a name="[1b5]"></a>track_pid_cal</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, track_bar_receive.o(i.track_pid_cal))
<BR><BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pos_pid_cal
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_synthetic_control
</UL>

<P><STRONG><a name="[ae]"></a>track_scan</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, track_task.o(i.track_scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = track_scan &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis_decode
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos.o(.constdata)
</UL>
<P><STRONG><a name="[d]"></a>track_status</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, track_bar_receive.o(i.track_status))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncoderTask
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_Init
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Comfirm_Online
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[f7]"></a>turn_uint16</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, track_bar_receive.o(i.turn_uint16))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chassis_decode
</UL>

<P><STRONG><a name="[33]"></a>usmart_cmd_rec</STRONG> (Thumb, 144 bytes, Stack size 96 bytes, usmart.o(i.usmart_cmd_rec))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = usmart_cmd_rec &rArr; usmart_get_fparam &rArr; usmart_str2num
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_strcmp
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_get_fparam
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_get_fname
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[34]"></a>usmart_exe</STRONG> (Thumb, 502 bytes, Stack size 128 bytes, usmart.o(i.usmart_exe))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = usmart_exe &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_get_parmpos
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_get_fname
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[1ef]"></a>usmart_get_aparm</STRONG> (Thumb, 164 bytes, Stack size 20 bytes, usmart_str.o(i.usmart_get_aparm))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = usmart_get_aparm
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_sys_cmd_exe
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_get_fparam
</UL>

<P><STRONG><a name="[1f5]"></a>usmart_get_cmdname</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, usmart_str.o(i.usmart_get_cmdname))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = usmart_get_cmdname
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_sys_cmd_exe
</UL>

<P><STRONG><a name="[1ea]"></a>usmart_get_fname</STRONG> (Thumb, 352 bytes, Stack size 60 bytes, usmart_str.o(i.usmart_get_fname))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = usmart_get_fname
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_strcmp
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_search_nextc
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_sys_cmd_exe
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_exe
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_cmd_rec
</UL>

<P><STRONG><a name="[1ec]"></a>usmart_get_fparam</STRONG> (Thumb, 202 bytes, Stack size 240 bytes, usmart_str.o(i.usmart_get_fparam))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = usmart_get_fparam &rArr; usmart_str2num
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_strlen
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_strcopy
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_str2num
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_get_parmpos
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_get_aparm
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_cmd_rec
</UL>

<P><STRONG><a name="[1ed]"></a>usmart_get_parmpos</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, usmart_str.o(i.usmart_get_parmpos))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usmart_get_parmpos
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_get_fparam
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_exe
</UL>

<P><STRONG><a name="[32]"></a>usmart_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usmart.o(i.usmart_init))
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[1f4]"></a>usmart_pow</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usmart_str.o(i.usmart_pow))
<BR><BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_str2num
</UL>

<P><STRONG><a name="[35]"></a>usmart_scan</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, usmart.o(i.usmart_scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = usmart_scan &rArr; usmart_sys_cmd_exe &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_sys_cmd_exe
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[1ee]"></a>usmart_search_nextc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usmart_str.o(i.usmart_search_nextc))
<BR><BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_search_nextc
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_search_nextc
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_get_fname
</UL>

<P><STRONG><a name="[1f0]"></a>usmart_str2num</STRONG> (Thumb, 214 bytes, Stack size 28 bytes, usmart_str.o(i.usmart_str2num))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = usmart_str2num
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_pow
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_sys_cmd_exe
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_get_fparam
</UL>

<P><STRONG><a name="[1eb]"></a>usmart_strcmp</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usmart_str.o(i.usmart_strcmp))
<BR><BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_sys_cmd_exe
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_strcmp
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_get_fname
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_cmd_rec
</UL>

<P><STRONG><a name="[1f2]"></a>usmart_strcopy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usmart_str.o(i.usmart_strcopy))
<BR><BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_strcopy
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_strcopy
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_get_fparam
</UL>

<P><STRONG><a name="[1f1]"></a>usmart_strlen</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usmart_str.o(i.usmart_strlen))
<BR><BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_get_fparam
</UL>

<P><STRONG><a name="[1f3]"></a>usmart_sys_cmd_exe</STRONG> (Thumb, 420 bytes, Stack size 72 bytes, usmart.o(i.usmart_sys_cmd_exe))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = usmart_sys_cmd_exe &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_strcmp
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_str2num
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_get_fname
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_get_cmdname
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_get_aparm
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_scan
</UL>

<P><STRONG><a name="[af]"></a>usmartscan</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usmart_task.o(i.usmartscan))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = usmartscan &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos.o(.constdata)
</UL>
<P><STRONG><a name="[1cd]"></a>uxListRemove</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, list.o(i.uxListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[1f9]"></a>vApplicationGetIdleTaskMemory</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, freertos.o(i.vApplicationGetIdleTaskMemory))
<BR><BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[1d2]"></a>vListInitialise</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, list.o(i.vListInitialise))
<BR><BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>

<P><STRONG><a name="[1dd]"></a>vListInitialiseItem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(i.vListInitialiseItem))
<BR><BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[1cf]"></a>vListInsert</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, list.o(i.vListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[1ce]"></a>vListInsertEnd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, list.o(i.vListInsertEnd))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[1d1]"></a>vPortEnterCritical</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, port.o(i.vPortEnterCritical))
<BR><BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[1d3]"></a>vPortExitCritical</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, port.o(i.vPortExitCritical))
<BR><BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[1d9]"></a>vPortFree</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, heap_4.o(i.vPortFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
</UL>

<P><STRONG><a name="[1fb]"></a>vPortSetupTimerInterrupt</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, port.o(i.vPortSetupTimerInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[1f6]"></a>vPortValidateInterruptPriority</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, port.o(i.vPortValidateInterruptPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vPortValidateInterruptPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortGetIPSR
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
</UL>

<P><STRONG><a name="[1c6]"></a>vTaskDelay</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, tasks.o(i.vTaskDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>

<P><STRONG><a name="[ee]"></a>vTaskDelete</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, tasks.o(i.vTaskDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LineTask
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncoderTask
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BooTask
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MV_QueryTaskFunc
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_red
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_blue
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Swicth
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HeightUpdate_Task
</UL>

<P><STRONG><a name="[1ff]"></a>vTaskInternalSetTimeOutState</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tasks.o(i.vTaskInternalSetTimeOutState))
<BR><BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
</UL>

<P><STRONG><a name="[1e1]"></a>vTaskMissedYield</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(i.vTaskMissedYield))
<BR><BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[1f8]"></a>vTaskPlaceOnEventList</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, tasks.o(i.vTaskPlaceOnEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[1c7]"></a>vTaskStartScheduler</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, tasks.o(i.vTaskStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = vTaskStartScheduler &rArr; xTaskCreateStatic &rArr; prvInitialiseNewTask &rArr; pxPortInitialiseStack
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationGetIdleTaskMemory
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
</UL>

<P><STRONG><a name="[1e3]"></a>vTaskSuspendAll</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tasks.o(i.vTaskSuspendAll))
<BR><BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[d1]"></a>vTaskSwitchContext</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, tasks.o(i.vTaskSwitchContext))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[1fa]"></a>xPortStartScheduler</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, port.o(i.xPortStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xPortStartScheduler
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvEnableVFP
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvStartFirstTask
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[1cb]"></a>xQueueGenericCreate</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, queue.o(i.xQueueGenericCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf_init
</UL>

<P><STRONG><a name="[1db]"></a>xQueueGenericReset</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, queue.o(i.xQueueGenericReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
</UL>

<P><STRONG><a name="[1c3]"></a>xQueueGenericSend</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, queue.o(i.xQueueGenericSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[1c2]"></a>xQueueGenericSendFromISR</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, queue.o(i.xQueueGenericSendFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[1a6]"></a>xQueueReceiveFromISR</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, queue.o(i.xQueueReceiveFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = xQueueReceiveFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U1_IRQHandler
</UL>

<P><STRONG><a name="[200]"></a>xTaskCheckForTimeOut</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, tasks.o(i.xTaskCheckForTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskCheckForTimeOut
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[1ca]"></a>xTaskCreate</STRONG> (Thumb, 90 bytes, Stack size 56 bytes, tasks.o(i.xTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
</UL>

<P><STRONG><a name="[1c9]"></a>xTaskCreateStatic</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, tasks.o(i.xTaskCreateStatic))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = xTaskCreateStatic &rArr; prvInitialiseNewTask &rArr; pxPortInitialiseStack
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[1fe]"></a>xTaskGetSchedulerState</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetSchedulerState))
<BR><BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[19f]"></a>xTaskIncrementTick</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, tasks.o(i.xTaskIncrementTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[1d7]"></a>xTaskPriorityDisinherit</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, tasks.o(i.xTaskPriorityDisinherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>

<P><STRONG><a name="[1e0]"></a>xTaskRemoveFromEventList</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, tasks.o(i.xTaskRemoveFromEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[1e6]"></a>xTaskResumeAll</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, tasks.o(i.xTaskResumeAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[108]"></a>__aeabi_dneg</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, basic.o(x$fpl$basic))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncoderTask
</UL>

<P><STRONG><a name="[24a]"></a>_dneg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[24b]"></a>__aeabi_fneg</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[24c]"></a>_fneg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[24d]"></a>_dabs</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[24e]"></a>_fabs</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[101]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_motor_pid1
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_motor_pid
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_control
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_synthetic_control
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Rebuild
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_imu_param
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_track_pid
</UL>

<P><STRONG><a name="[201]"></a>_d2f</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[109]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_synthetic_control
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncoderTask
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
</UL>

<P><STRONG><a name="[204]"></a>_dadd</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
</UL>

<P><STRONG><a name="[209]"></a>__fpl_dcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dcmpi.o(x$fpl$dcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
</UL>

<P><STRONG><a name="[10b]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_motor_pid1
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_motor_pid
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_control
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_synthetic_control
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncoderTask
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_imu_param
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_track_pid
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_by_encoder
</UL>

<P><STRONG><a name="[207]"></a>_ddiv</STRONG> (Thumb, 552 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[10a]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, deqf.o(x$fpl$deqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncoderTask
</UL>

<P><STRONG><a name="[208]"></a>_dcmpeq</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, deqf.o(x$fpl$deqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>

<P><STRONG><a name="[10e]"></a>__aeabi_d2iz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_encoder
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncoderTask
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_by_encoder
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait_Switches
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWSwitch_Move
</UL>

<P><STRONG><a name="[20a]"></a>_dfix</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[1c0]"></a>__aeabi_d2uiz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;distance_convert
</UL>

<P><STRONG><a name="[20b]"></a>_dfixu</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[ff]"></a>__aeabi_i2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_motor_pid1
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_motor_pid
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Rebuild
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncoderTask
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_imu_param
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_track_pid
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_by_encoder
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait_Switches
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_speed
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWSwitch_Move
</UL>

<P><STRONG><a name="[24f]"></a>_dflt</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[1bf]"></a>__aeabi_ui2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu))
<BR><BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pid_control
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;distance_convert
</UL>

<P><STRONG><a name="[250]"></a>_dfltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu), UNUSED)

<P><STRONG><a name="[107]"></a>__aeabi_cdcmple</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_synthetic_control
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncoderTask
</UL>

<P><STRONG><a name="[20c]"></a>_dcmple</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>

<P><STRONG><a name="[20f]"></a>__fpl_dcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drcmple
</UL>

<P><STRONG><a name="[100]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Rebuild
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncoderTask
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;distance_convert
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HWSwitch_Move
</UL>

<P><STRONG><a name="[20d]"></a>_dmul</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[203]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfixu
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfix
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[206]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[136]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_synthetic_control
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
</UL>

<P><STRONG><a name="[20e]"></a>_drcmple</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmple_InfNaN
</UL>

<P><STRONG><a name="[10c]"></a>__aeabi_drsub</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncoderTask
</UL>

<P><STRONG><a name="[210]"></a>_drsb</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[1b0]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_synthetic_control
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wait_Switches
</UL>

<P><STRONG><a name="[212]"></a>_dsub</STRONG> (Thumb, 464 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[1b6]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chassis_synthetic_control
</UL>

<P><STRONG><a name="[213]"></a>_f2d</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
</UL>

<P><STRONG><a name="[214]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
</UL>

<P><STRONG><a name="[c5]"></a>_fp_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[251]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[252]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[202]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[126]"></a>__NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f7xx_hal_cortex.o(i.__NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[11a]"></a>DMA_CalcBaseAndBitshift</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f7xx_hal_dma.o(i.DMA_CalcBaseAndBitshift))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[119]"></a>DMA_CheckFifoParam</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, stm32f7xx_hal_dma.o(i.DMA_CheckFifoParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_CheckFifoParam
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[133]"></a>TIM_ITRx_SetConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f7xx_hal_tim.o(i.TIM_ITRx_SetConfig))
<BR><BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[14a]"></a>TIM_OC1_SetConfig</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, stm32f7xx_hal_tim.o(i.TIM_OC1_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_OC1_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[14c]"></a>TIM_OC3_SetConfig</STRONG> (Thumb, 100 bytes, Stack size 20 bytes, stm32f7xx_hal_tim.o(i.TIM_OC3_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_OC3_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[14d]"></a>TIM_OC4_SetConfig</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, stm32f7xx_hal_tim.o(i.TIM_OC4_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC4_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[14e]"></a>TIM_OC5_SetConfig</STRONG> (Thumb, 68 bytes, Stack size 12 bytes, stm32f7xx_hal_tim.o(i.TIM_OC5_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC5_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[14f]"></a>TIM_OC6_SetConfig</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, stm32f7xx_hal_tim.o(i.TIM_OC6_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC6_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[131]"></a>TIM_TI1_ConfigInputStage</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f7xx_hal_tim.o(i.TIM_TI1_ConfigInputStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_TI1_ConfigInputStage
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[132]"></a>TIM_TI2_ConfigInputStage</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32f7xx_hal_tim.o(i.TIM_TI2_ConfigInputStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_TI2_ConfigInputStage
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[139]"></a>TIM_TI2_SetConfig</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, stm32f7xx_hal_tim.o(i.TIM_TI2_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_TI2_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_ConfigChannel
</UL>

<P><STRONG><a name="[a6]"></a>UART_DMAAbortOnError</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f7xx_hal_uart.o(i.UART_DMAAbortOnError))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_DMAAbortOnError
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f7xx_hal_uart.o(i.HAL_UART_IRQHandler)
</UL>
<P><STRONG><a name="[156]"></a>UART_EndRxTransfer</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32f7xx_hal_uart.o(i.UART_EndRxTransfer))
<BR><BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[a8]"></a>UART_RxISR_16BIT</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, stm32f7xx_hal_uart.o(i.UART_RxISR_16BIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UART_RxISR_16BIT &rArr; HAL_UART_RxCpltCallback &rArr; Data_Rebuild &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f7xx_hal_uart.o(i.UART_Start_Receive_IT)
</UL>
<P><STRONG><a name="[a7]"></a>UART_RxISR_8BIT</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, stm32f7xx_hal_uart.o(i.UART_RxISR_8BIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UART_RxISR_8BIT &rArr; HAL_UART_RxCpltCallback &rArr; Data_Rebuild &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f7xx_hal_uart.o(i.UART_Start_Receive_IT)
</UL>
<P><STRONG><a name="[1d4]"></a>prvCopyDataFromQueue</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, queue.o(i.prvCopyDataFromQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvCopyDataFromQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
</UL>

<P><STRONG><a name="[1d6]"></a>prvCopyDataToQueue</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, queue.o(i.prvCopyDataToQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[1da]"></a>prvInitialiseNewQueue</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, queue.o(i.prvInitialiseNewQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[1df]"></a>prvUnlockQueue</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, queue.o(i.prvUnlockQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = prvUnlockQueue &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskMissedYield
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[1cc]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, tasks.o(i.prvAddCurrentTaskToDelayedList))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[1d0]"></a>prvAddNewTaskToReadyList</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, tasks.o(i.prvAddNewTaskToReadyList))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prvAddNewTaskToReadyList
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[1d8]"></a>prvDeleteTCB</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, tasks.o(i.prvDeleteTCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[aa]"></a>prvIdleTask</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, tasks.o(i.prvIdleTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = prvIdleTask &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(i.vTaskStartScheduler)
</UL>
<P><STRONG><a name="[1dc]"></a>prvInitialiseNewTask</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, tasks.o(i.prvInitialiseNewTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvInitialiseNewTask &rArr; pxPortInitialiseStack
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[1f7]"></a>prvResetNextTaskUnblockTime</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, tasks.o(i.prvResetNextTaskUnblockTime))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[1c8]"></a>makeFreeRtosPriority</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cmsis_os.o(i.makeFreeRtosPriority))
<BR><BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
</UL>

<P><STRONG><a name="[1e4]"></a>prvHeapInit</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, heap_4.o(i.prvHeapInit))
<BR><BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[1e5]"></a>prvInsertBlockIntoFreeList</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, heap_4.o(i.prvInsertBlockIntoFreeList))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[a9]"></a>prvTaskExitError</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, port.o(i.prvTaskExitError))
<BR>[Address Reference Count : 1]<UL><LI> port.o(i.pxPortInitialiseStack)
</UL>
<P><STRONG><a name="[211]"></a>_dadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
</UL>

<P><STRONG><a name="[205]"></a>_dsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[a5]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
